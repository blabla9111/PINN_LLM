import streamlit as st
from web.backend.utils import *
from lib.loss_update import save, save_py
from lib.create_file import create_file_in_tmp
from lib.prompt_sender import *
from lib.parser import *
import subprocess
import time
from huggingface_hub import InferenceClient
import sys
import matplotlib.pyplot as plt

client = InferenceClient(model="meta-llama/Meta-Llama-3.1-8B-Instruct",
                         token=st.secrets['HUGGINGFACE_HUB_TOKEN'])


def generate_model_page():
    PROMPT_FILE_PATH = 'promts_templates/get_loss_based_on_recommendation_prompt.json'
    ANSWER_FILE_PATH = 'promts_templates/get_loss_based_on_recommendation_prompt_answer.json'
    LOSS_FILE_PATH = 'loss_dinn_LLM.py'
    LOSS_PRIMARY_FILE_PATH = 'web/backend/PINN_utils/loss_dinn_primary.py'
    LLM_URL = 'http://localhost:1234/v1/chat/completions'

    LOSS_CHECK_FILE_NAME = "loss_dinn_check.py"
    LOSS_CHECK_START_FILE_PATH = "web/backend/code_constructor_files/loss_dinn_check/loss_dinn_check_start.txt"
    LOSS_CHECK_END_FILE_PATH = "web/backend/code_constructor_files/loss_dinn_check/loss_dinn_check_end.txt"

    PINN_NEW_FILE_NAME = "PINN_NEW_MODEL.py"
    PINN_RUN_START_FILE_PATH = "web/backend/code_constructor_files/PINN_run/PINN_class_start_code.txt"
    PINN_RUN_END_FILE_PATH = "web/backend/code_constructor_files/PINN_run/PINN_class_end_code.txt"


    RUN_PINN_COMMAND = ['python', 'PINN.py']
    RUN_TESTER_COMMAND = ['python', 'loss_dinn_check.py ', '']
    PROMPT_FIX_ERROR_FILE_PATH = "promts_templates/prompt_fix_error.json"
    ANSWER_FIX_ERROR_FILE_PATH = 'promts_templates/answer_fix_error_from_LLM_2.json'

    EXPERT_COMMENT = st.session_state.user_comment
    comment_class = st.session_state.user_comment_class
    comment_subclass = st.session_state.user_comment_subclass

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    st.header("üöÄ –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    progress_bar = st.progress(0)
    status_text = st.empty()
    details_container = st.empty()
    error_container = st.empty()

    # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    status_text.text("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM...")
    details_container.text(
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    code = get_loss_func_as_str(LOSS_PRIMARY_FILE_PATH)
    create_get_loss_based_on_recommendation_prompt(
        PROMPT_FILE_PATH, comment_class, comment_subclass, EXPERT_COMMENT, code)
    progress_bar.progress(10)
    time.sleep(0.5)

    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
    status_text.text("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
    details_container.text("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM")
    send_prompt(PROMPT_FILE_PATH, LLM_URL, client, ANSWER_FILE_PATH)
    progress_bar.progress(30)
    time.sleep(1)

    # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    status_text.text("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM...")
    details_container.text("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞")
    json_text = load_text_to_json(ANSWER_FILE_PATH)
    code = llm_answer_to_python_code(json_text)
    # print(code)
    details_container.text(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n```python\n{code}\n```")
    progress_bar.progress(40)
    # return

    # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    status_text.text("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
    # save(LOSS_FILE_PATH, code)
    loss_file_path, content = save_py(LOSS_FILE_PATH, code)
    progress_bar.progress(50)
    # print(file_path)
    # return
    status_text.text("üß™ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
    details_container.text("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏")
    # RUN_TESTER_COMMAND[2] = code
    file_path, content = create_file_in_tmp(code, LOSS_CHECK_FILE_NAME,
                                         LOSS_CHECK_START_FILE_PATH, LOSS_CHECK_END_FILE_PATH)
    # output = subprocess.run(RUN_TESTER_COMMAND, capture_output=True, text=True)
    output = subprocess.run(
        [f"{sys.executable}", file_path, code], capture_output=True)
    print(output.stdout)
    # t =  eval(output.stdout)
    # return

    if "True" in str(output.stdout):
        t = (True, '')
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {t}")
    else:
        t = (False, str(output.stdout))
    # return
    is_correct = t[0]
    status_text.text(is_correct)
    print(is_correct)
    error = t[1]
    print(error)

    error_counter = 0
    max_error_iterations = 4

    # –®–∞–≥ 5: –¶–∏–∫–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    while not is_correct and error_counter < max_error_iterations:
        error_counter += 1
        status_text.text(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {error_counter})...")
        # details_container.text(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error[:100]}...")
        error_container.error(f"–û—à–∏–±–∫–∞: {error}")

        progress_value = 50 + (error_counter * 10)
        progress_bar.progress(min(progress_value, 80))

        create_prompt_to_fix_error(PROMPT_FIX_ERROR_FILE_PATH, code, error)

        if error_counter % 3 == 0:
            details_container.text("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
            send_prompt(PROMPT_FILE_PATH, LLM_URL, client, ANSWER_FILE_PATH)
            json_text = load_text_to_json(ANSWER_FILE_PATH)
        else:
            details_container.text(
                "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏...")
            send_prompt(PROMPT_FIX_ERROR_FILE_PATH,
                        LLM_URL, client, ANSWER_FIX_ERROR_FILE_PATH)
            json_text = load_text_to_json(ANSWER_FIX_ERROR_FILE_PATH)

        code = llm_answer_to_python_code(json_text)
        loss_file_path, content = save_py(LOSS_FILE_PATH, code)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        details_container.text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
        # RUN_TESTER_COMMAND[2] = code
        file_path, content = create_file_in_tmp(code, LOSS_CHECK_FILE_NAME,
                                             LOSS_CHECK_START_FILE_PATH, LOSS_CHECK_END_FILE_PATH)
        output = subprocess.run(
            [f"{sys.executable}", file_path, code], capture_output=True)
        # output = subprocess.run(
        #     RUN_TESTER_COMMAND, capture_output=True, text=True, shell=True)
        # print(f'!!!!!!!!\n\n{output}')
        # return
        # t = eval(output.stdout)
        if "True" in str(output.stdout):
            t = (True, '')
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {t}")
        else:
            t = (False, str(output.stdout))
        is_correct = t[0]
        status_text.text(is_correct)
        error = t[1]

        if is_correct:
            error_container.empty()
            details_container.text("‚úÖ –û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            progress_bar.progress(80)

    # return
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if not is_correct:
        status_text.text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
        error_container.error(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {error}")
        progress_bar.progress(100)
        st.error("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º—ã—Ö –æ—à–∏–±–æ–∫")
        return

    # –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è PINN
    status_text.text("üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è PINN –º–æ–¥–µ–ª–∏...")
    details_container.text(
        "–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)")
    progress_bar.progress(90)

    # –ó–∞–ø—É—Å–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filename = ""
    with st.spinner("–ò–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
        file_path, content = create_file_in_tmp(code, PINN_NEW_FILE_NAME,
                                             PINN_RUN_START_FILE_PATH, PINN_RUN_END_FILE_PATH)
        output = subprocess.run(
            [f"{sys.executable}", file_path], capture_output=True, text=True)
        print(output.stdout)
        text = str(output.stdout)
        lines = text.strip().split('\n')
        last_line = lines[-1] if lines else ""
        filename = last_line.split("Model saved to ")[-1].strip()
        print(filename)

    # –®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    status_text.text("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    details_container.text("–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    progress_bar.progress(100)

    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ–±—É—á–µ–Ω–∞!")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    with st.expander("–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"):
        st.text("–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        st.code(output.stdout[:1000] +
                "..." if len(output.stdout) > 1000 else output.stdout)

        if output.stderr:
            st.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏:")
            st.code(output.stderr)

    st.write("Generate complete!")
    # return
    timesteps, susceptible, infected, dead, recovered, x = get_data_for_model(
        "data.csv")
    loaded_dinn = load_model('./saved_models/dinn_1.pth',
                             timesteps, susceptible, infected, dead, recovered)
    loaded_dinn_new = load_model(filename,
                                 timesteps, susceptible, infected, dead, recovered)
    S_pred, I_pred, D_pred, R_pred, alpha_pred = loaded_dinn.predict()

    S_pred_new, I_pred_new, D_pred_new, R_pred_new, alpha_pred_new = loaded_dinn_new.predict()
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìà–ì—Ä–∞—Ñ–∏–∫ I")
        fig, ax = plt.subplots(figsize=(10, 6))

        ax.scatter(timesteps[:x][::10], infected[:x][::10],
                   c='blue', alpha=0.5, lw=0.5, label='Real data')

        ax.scatter(timesteps[x:][::10], infected[x:][::10],
                   c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')

        ax.plot(timesteps, I_pred.detach().numpy(),
                'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')
        ax.plot(timesteps, I_pred_new.detach().numpy(),
                'red', alpha=0.9, lw=2, label='NEW_Model', linestyle='dashed')

        ax.set_xlabel("Time, days")
        ax.set_ylabel("Infected, persons")
        ax.legend()
        ax.grid(True, alpha=0.3)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Streamlit
        st.pyplot(fig)

        download_temp_file(loss_file_path)
        download_temp_file(filename)
    with col2:
        # st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        metrics_I = calculate_metrics(infected[x:187], I_pred[x:187])
        metrics_II = calculate_metrics(
            infected[x:187], I_pred_new[x:187])  # –º–µ—Ç—Ä–∏–∫–∏ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_table = compare_metrics(
            metrics_I, metrics_II, "PINN", "NEW_PINN")
