import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from web.backend.utils import *

def start_page():
    
    timesteps, susceptible, infected, dead, recovered, x = get_data_for_model(
        "data.csv")
    loaded_dinn = load_model('./saved_models/dinn_1.pth',
                             timesteps, susceptible, infected, dead, recovered)
    S_pred, I_pred, D_pred, R_pred, alpha_pred = loaded_dinn.predict()
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìà–ì—Ä–∞—Ñ–∏–∫–∏")

        # S
        fig = plot_sidr_predictions(
            timesteps=timesteps,
            x=x,
            susceptible=susceptible,  
            infected=infected,        
            dead=dead,        
            recovered=recovered,      
            S_pred=S_pred,
            I_pred=I_pred,
            D_pred=D_pred,
            R_pred=R_pred
        )



        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Streamlit
        st.pyplot(fig)

    with col2:
        st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π")


        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        metrics_S = calculate_metrics(susceptible[x:x+30], S_pred[x:x+30])
        metrics_I = calculate_metrics(infected[x:x+30], I_pred[x:x+30])
        metrics_R = calculate_metrics(recovered[x:x+30], R_pred[x:x+30])
        metrics_D = calculate_metrics(dead[x:x+30], D_pred[x:x+30])

        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É
        metrics_df = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': list(metrics_I.keys()),
            'S (Susceptible)': list(metrics_S.values()),
            'I (Infected)': list(metrics_I.values()),
            'R (Recovered)': list(metrics_R.values()),
            'D (Dead)': list(metrics_D.values())
        })

        st.dataframe(metrics_df, hide_index=True, use_container_width=True)

        st.subheader("–≠–ø–∏–¥.–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        st.metric("R0 (basic reproduction number)",
                  get_R0(S_pred, I_pred, D_pred, R_pred, timesteps))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.metric("–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö", len(timesteps))
        st.metric("–ò–º—è –º–æ–¥–µ–ª–∏", "dinn_1")
        st.metric("–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏", "v1.0.0")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.divider()

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    st.header("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

    comment = st.text_area(
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –≤ —á–µ–º-—Ç–æ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É –º–æ–¥–µ–ª–∏...",
        height=100,
        key="comment_input"
    )

    col_btn1, col_btn2 = st.columns([1, 6])

    with col_btn1:
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary", key="submit_btn"):
            if comment.strip():

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state
                st.session_state.comment_analysis = "analysis_result"
                st.session_state.user_comment = translate_to_en(comment)

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.session_state.current_page = "results"
                st.rerun()
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

    with col_btn2:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å", key="clear_btn"):
            st.rerun()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    with st.expander("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"):
        if 'comment_history' not in st.session_state:
            st.session_state.comment_history = []

        if st.session_state.comment_history:
            for i, item in enumerate(st.session_state.comment_history[::-1]):
                if st.button(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ #{len(st.session_state.comment_history)-i}", key=f"view_{i}"):
                    st.session_state.current_page = "results"
                    st.session_state.user_comment = item['comment']
                    st.session_state.comment_analysis = {
                        "main_class": item['main_class'],
                        "subclass": item['subclass']
                    }
                    st.rerun()
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç–∞")
