from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import torch
from web.backend.PINN_utils.PINN_class import DINN
import numpy as np
import pandas as pd
import streamlit as st
import os
import matplotlib.pyplot as plt


def load_model(filepath, t, S_data, I_data, D_data, R_data):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"""
    print("–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏")
    checkpoint = torch.load(filepath)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
    model = DINN(t, S_data, I_data, D_data, R_data)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    model.load_state_dict(checkpoint['model_state_dict'])
    model.beta_tilda = checkpoint['beta_tilda']
    model.gamma_tilda = checkpoint['gamma_tilda']
    model.S_max = checkpoint['S_max']
    model.I_max = checkpoint['I_max']
    model.D_max = checkpoint['D_max']
    model.R_max = checkpoint['R_max']
    model.S_min = checkpoint['S_min']
    model.I_min = checkpoint['I_min']
    model.D_min = checkpoint['D_min']
    model.R_min = checkpoint['R_min']
    model.t = checkpoint['t']
    model.S = checkpoint['S']
    model.I = checkpoint['I']
    model.D = checkpoint['D']
    model.R = checkpoint['R']

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    model.t_float = model.t.float()
    model.t_batch = torch.reshape(model.t_float, (len(model.t), 1))
    model.S_hat = (model.S - model.S_min) / (model.S_max - model.S_min)
    model.I_hat = (model.I - model.I_min) / (model.I_max - model.I_min)
    model.D_hat = (model.D - model.D_min) / (model.D_max - model.D_min)
    model.R_hat = (model.R - model.R_min) / (model.R_max - model.R_min)

    print(f"Model loaded from {filepath}")
    return model


def calculate_metrics(y_true, y_pred):
    """
    Calculate regression metrics

    Parameters:
    y_true: array-like, true values
    y_pred: array-like, predicted values

    Returns:
    dict: Dictionary with MAE, MSE, RMSE, R2 metrics
    """
    # Convert to numpy arrays if they are tensors
    if torch.is_tensor(y_true):
        y_true = y_true.detach().numpy()
    if torch.is_tensor(y_pred):
        y_pred = y_pred.detach().numpy()

    # Ensure they are 1D arrays
    y_true = np.array(y_true).flatten()
    y_pred = np.array(y_pred).flatten()

    # Calculate metrics
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)

    metrics = {
        'MAE': mae,
        'MSE': mse,
        'RMSE': rmse,
        'R2': r2
    }

    return metrics


def compare_metrics(metrics_dict1, metrics_dict2, model1_name="–ú–æ–¥–µ–ª—å 1", model2_name="–ú–æ–¥–µ–ª—å 2"):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
    
    Parameters:
    metrics_dict1: dict, –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
    metrics_dict2: dict, –º–µ—Ç—Ä–∏–∫–∏ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏
    model1_name: str, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
    model2_name: str, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏
    """

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_df = pd.DataFrame({
        '–ú–µ—Ç—Ä–∏–∫–∞': list(metrics_dict1.keys()),
        model1_name: list(metrics_dict1.values()),
        model2_name: list(metrics_dict2.values())
    })

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
    comparison_df['–†–∞–∑–Ω–∏—Ü–∞'] = comparison_df[model1_name] - \
        comparison_df[model2_name]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for col in [model1_name, model2_name, '–†–∞–∑–Ω–∏—Ü–∞']:
        comparison_df[col] = comparison_df[col].apply(lambda x: f"{x:.4f}")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    # st.header("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π")
    st.dataframe(comparison_df, hide_index=True, width='stretch')

    return comparison_df


def download_temp_file(file_path, button_label="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    file_path: –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    button_label: —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    if os.path.exists(file_path):
        with open(file_path, "rb") as file:
            file_data = file.read()

        file_name = os.path.basename(file_path)

        st.download_button(
            label=button_label+" "+file_name,
            data=file_data,
            file_name=file_name,
            mime="application/octet-stream",
            on_click="ignore"
        )
    else:
        st.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def get_data_for_model(filepath):
    x = 180 # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

    covid_cases = pd.read_csv(filepath)
    susceptible = []
    infected = []
    dead = []
    recovered = []
    timesteps = []

    d1 = covid_cases['S']
    d2 = covid_cases['I']
    d3 = covid_cases['D']
    d4 = covid_cases['R']
    d5 = covid_cases['t']

    for item in range(len(d5)):
        if item % 1 == 0:
            susceptible.append(d1[item])
            infected.append(d2[item])
            dead.append(d3[item])
            recovered.append(d4[item])
            timesteps.append(d5[item])


    return timesteps, susceptible, infected, dead, recovered, x


def translate_to_en(text):
    from deep_translator import GoogleTranslator

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å deep-translator)
    translator = GoogleTranslator(source='ru', target='en')
    translated_text = translator.translate(text)
    # print(translated_text)
    return translated_text


def plot_sidr_predictions(timesteps, x, susceptible, infected, dead, recovered,
                          S_pred, I_pred, D_pred, R_pred, figsize=(15, 12)):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ SIDR –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2x2
    
    Parameters:
    -----------
    timesteps : array-like
        –ú–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    x : int
        –ò–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç–∏
    susceptible : array-like
        –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤—ã–º
    infected : array-like
        –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
    deceased : array-like
        –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–µ—Ä—à–∏–º
    recovered : array-like
        –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏–º
    S_pred, I_pred, D_pred, R_pred : tensor
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø
    figsize : tuple, optional
        –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (15, 12))
    
    Returns:
    --------
    fig : matplotlib.figure.Figure
        –û–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    """

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å 2x2 —Å—É–±–ø–ª–æ—Ç–æ–≤
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=figsize)

    # –ì—Ä–∞—Ñ–∏–∫ 1: Susceptible (S) - –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
    ax1.scatter(timesteps[:x][::10], susceptible[:x][::10],
                c='blue', alpha=0.5, lw=0.5, label='Real data')
    ax1.scatter(timesteps[x:][::10], susceptible[x:][::10],
                c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')
    ax1.plot(timesteps, S_pred.detach().numpy(),
             'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')
    ax1.set_title("Susceptible (S)")
    ax1.set_xlabel("Time, days")
    ax1.set_ylabel("Persons")
    ax1.legend()
    ax1.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 2: Infected (I) - –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
    ax2.scatter(timesteps[:x][::10], infected[:x][::10],
                c='blue', alpha=0.5, lw=0.5, label='Real data')
    ax2.scatter(timesteps[x:][::10], infected[x:][::10],
                c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')
    ax2.plot(timesteps, I_pred.detach().numpy(),
             'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')
    ax2.set_title("Infected (I)")
    ax2.set_xlabel("Time, days")
    ax2.set_ylabel("Persons")
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    

    # –ì—Ä–∞—Ñ–∏–∫ 3: Recovered (R) - –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
    ax3.scatter(timesteps[:x][::10], recovered[:x][::10],
                c='blue', alpha=0.5, lw=0.5, label='Real data')
    ax3.scatter(timesteps[x:][::10], recovered[x:][::10],
                c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')
    ax3.plot(timesteps, R_pred.detach().numpy(),
             'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')
    ax3.set_title("Recovered (R)")
    ax3.set_xlabel("Time, days")
    ax3.set_ylabel("Persons")
    ax3.legend()
    ax3.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 4: Deceased (D) - –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
    ax4.scatter(timesteps[:x][::10], dead[:x][::10],
                c='blue', alpha=0.5, lw=0.5, label='Real data')
    ax4.scatter(timesteps[x:][::10], dead[x:][::10],
                c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')
    ax4.plot(timesteps, D_pred.detach().numpy(),
             'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')
    ax4.set_title("Dead (D)")
    ax4.set_xlabel("Time, days")
    ax4.set_ylabel("Persons")
    ax4.legend()
    ax4.grid(True, alpha=0.3)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    plt.tight_layout()

    return fig


def plot_comparison_single(timesteps, x, real_data, pred_old, pred_new,
                           title, ylabel, figsize=(10, 6), sampling_step=10):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Parameters:
    -----------
    timesteps : array-like
        –ú–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    x : int
        –ò–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é —á–∞—Å—Ç–∏
    real_data : array-like
        –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pred_old : tensor
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏
    pred_new : tensor
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    title : str
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    ylabel : str
        –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ Y
    figsize : tuple, optional
        –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10, 6))
    sampling_step : int, optional
        –®–∞–≥ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è scatter plot (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    
    Returns:
    --------
    fig : matplotlib.figure.Figure
        –û–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    """

    fig, ax = plt.subplots(figsize=figsize)

    ax.scatter(timesteps[:x][::sampling_step], real_data[:x][::sampling_step],
               c='blue', alpha=0.5, lw=0.5, label='Real data')

    ax.scatter(timesteps[x:][::sampling_step], real_data[x:][::sampling_step],
               c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')

    ax.plot(timesteps, pred_old.detach().numpy(),
            'black', alpha=0.9, lw=2, label='Old Model', linestyle='dashed')
    ax.plot(timesteps, pred_new.detach().numpy(),
            'red', alpha=0.9, lw=2, label='New Model', linestyle='dashed')

    ax.set_xlabel("Time, days")
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.legend()
    ax.grid(True, alpha=0.3)

    return fig

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def plot_S_comparison(timesteps, x, susceptible, S_pred_old, S_pred_new, figsize=(10, 6)):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è Susceptible"""
    return plot_comparison_single(
        timesteps, x, susceptible, S_pred_old, S_pred_new,
        "Susceptible (S) Comparison", "Susceptible, persons", figsize
    )


def plot_I_comparison(timesteps, x, infected, I_pred_old, I_pred_new, figsize=(10, 6)):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è Infected"""
    return plot_comparison_single(
        timesteps, x, infected, I_pred_old, I_pred_new,
        "Infected (I) Comparison", "Infected, persons", figsize
    )


def plot_R_comparison(timesteps, x, recovered, R_pred_old, R_pred_new, figsize=(10, 6)):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è Recovered"""
    return plot_comparison_single(
        timesteps, x, recovered, R_pred_old, R_pred_new,
        "Recovered (R) Comparison", "Recovered, persons", figsize
    )


def plot_D_comparison(timesteps, x, deceased, D_pred_old, D_pred_new, figsize=(10, 6)):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è Deceased"""
    return plot_comparison_single(
        timesteps, x, deceased, D_pred_old, D_pred_new,
        "Dead (D) Comparison", "Dead, persons", figsize
    )
