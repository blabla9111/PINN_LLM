from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
import torch
from PINN_class import DINN
from comment_classificator.match_loss_classification import predict_class_and_sub_class
from lib.prompt_sender import *
from lib.parser import *
from lib.loss_update import save
import subprocess
import time
from huggingface_hub import InferenceClient


client = InferenceClient(model="meta-llama/Meta-Llama-3.1-8B-Instruct",
                         token=st.secrets['HUGGINGFACE_HUB_TOKEN'])


CLASS_TYPE_INFO = {"1": ["–ü–æ–≤–µ–¥–µ–Ω–∏–µ —ç–ø–∏–¥–µ–º–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º —ç–∫—Å–ø–µ—Ä—Ç–∞.",{
    "1": "–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª-–≤–∞ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–Ω—ã—Ö",
    "2": "–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª-–≤–∞ –≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤—ã—Ö",
    "3": "–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª-–≤–∞ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö",
    "4": "–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª-–≤–∞ —Å–∫–æ–Ω—á–∞–≤—à–∏—Ö—Å—è"
}],
    "2": ["–£—á–∏—Ç—ã–≤–∞–Ω–∏–µ –º–µ—Ä –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —ç–ø–∏–¥–µ–º–∏–∏.", {
        "1": "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–µ—Ä",
        "2": "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–µ—Ä",
        "3": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–µ—Ä",
}],
    "3": ["–ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É —ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.", {
        "1": "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
        "2": "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–æ–ª-–≤—É",
}],
    "4": ["–ü–æ–∑–∏—Ü–∏—è –ø–∏–∫–∞ —ç–ø–∏–¥–µ–º–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º —ç–∫—Å–ø–µ—Ä—Ç–∞.", {
        "1": "–†–∞–Ω–Ω–∏–π/–ø–æ–∑–¥–Ω–∏–π –ø–∏–∫",
        "2": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –ø–∏–∫–∞",
}]}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏", layout="wide")


def load_model(filepath, t, S_data, I_data, D_data, R_data):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"""
    print("–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏")
    checkpoint = torch.load(filepath)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
    model = DINN(t, S_data, I_data, D_data, R_data)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    model.load_state_dict(checkpoint['model_state_dict'])
    model.beta_tilda = checkpoint['beta_tilda']
    model.gamma_tilda = checkpoint['gamma_tilda']
    model.S_max = checkpoint['S_max']
    model.I_max = checkpoint['I_max']
    model.D_max = checkpoint['D_max']
    model.R_max = checkpoint['R_max']
    model.S_min = checkpoint['S_min']
    model.I_min = checkpoint['I_min']
    model.D_min = checkpoint['D_min']
    model.R_min = checkpoint['R_min']
    model.t = checkpoint['t']
    model.S = checkpoint['S']
    model.I = checkpoint['I']
    model.D = checkpoint['D']
    model.R = checkpoint['R']

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    model.t_float = model.t.float()
    model.t_batch = torch.reshape(model.t_float, (len(model.t), 1))
    model.S_hat = (model.S - model.S_min) / (model.S_max - model.S_min)
    model.I_hat = (model.I - model.I_min) / (model.I_max - model.I_min)
    model.D_hat = (model.D - model.D_min) / (model.D_max - model.D_min)
    model.R_hat = (model.R - model.R_min) / (model.R_max - model.R_min)

    print(f"Model loaded from {filepath}")
    return model


def calculate_metrics(y_true, y_pred):
    """
    Calculate regression metrics

    Parameters:
    y_true: array-like, true values
    y_pred: array-like, predicted values

    Returns:
    dict: Dictionary with MAE, MSE, RMSE, R2 metrics
    """
    # Convert to numpy arrays if they are tensors
    if torch.is_tensor(y_true):
        y_true = y_true.detach().numpy()
    if torch.is_tensor(y_pred):
        y_pred = y_pred.detach().numpy()

    # Ensure they are 1D arrays
    y_true = np.array(y_true).flatten()
    y_pred = np.array(y_pred).flatten()

    # Calculate metrics
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)

    metrics = {
        'MAE': mae,
        'MSE': mse,
        'RMSE': rmse,
        'R2': r2
    }

    return metrics

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞


def main_page():
    covid_cases = pd.read_csv('data.csv')


    S = covid_cases['S']
    I = covid_cases['I']
    D = covid_cases['D']
    R = covid_cases['R']
    susceptible = []
    infected = []
    dead = []
    recovered = []
    timesteps = []

    d1 = covid_cases['S']
    d2 = covid_cases['I']
    d3 = covid_cases['D']
    d4 = covid_cases['R']
    d5 = covid_cases['t']

    for item in range(len(d5)):
        if item % 1 == 0:
            susceptible.append(d1[item])
            infected.append(d2[item])
            dead.append(d3[item])
            recovered.append(d4[item])
            timesteps.append(d5[item])

    x = 180
    loaded_dinn = load_model('./saved_models/dinn_1.pth',
                             timesteps, susceptible, infected, dead, recovered)
    S_pred, I_pred, D_pred, R_pred, alpha_pred = loaded_dinn.predict()
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìà–ì—Ä–∞—Ñ–∏–∫ I")
        fig, ax = plt.subplots(figsize=(10, 6))


        ax.scatter(timesteps[:x][::10], infected[:x][::10],
                c='blue', alpha=0.5, lw=0.5, label='Real data')

        ax.scatter(timesteps[x:][::10], infected[x:][::10],
                c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')

        ax.plot(timesteps, I_pred.detach().numpy(),
                'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')

        ax.set_xlabel("Time, days")
        ax.set_ylabel("Infected, persons")
        ax.legend()
        ax.grid(True, alpha=0.3)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Streamlit
        st.pyplot(fig)

    with col2:
        st.header("üìä–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        metrics_I = calculate_metrics(infected[x:187], I_pred[x:187]) # –Ω–∞ –Ω–µ–¥–µ–ª—é —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º
        metrics_df = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': list(metrics_I.keys()),
            '–ó–Ω–∞—á–µ–Ω–∏–µ': list(metrics_I.values())
        })

        metrics_df = pd.DataFrame(metrics_df)
        st.dataframe(metrics_df, hide_index=True, width='stretch')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.metric("–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö", len(timesteps))
        st.metric("–ò–º—è –º–æ–¥–µ–ª–∏", "dinn_1")
        st.metric("–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏", "v1.0.0")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.divider()

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    st.header("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

    comment = st.text_area(
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –≤ —á–µ–º-—Ç–æ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É –º–æ–¥–µ–ª–∏...",
        height=100,
        key="comment_input"
    )

    col_btn1, col_btn2 = st.columns([1, 6])

    with col_btn1:
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary", key="submit_btn"):
            if comment.strip():
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                # analysis_result = analyze_comment(comment)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state
                st.session_state.comment_analysis = "analysis_result"
                st.session_state.user_comment = comment

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.session_state.current_page = "results"
                st.rerun()
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

    with col_btn2:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å", key="clear_btn"):
            st.rerun()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    with st.expander("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"):
        if 'comment_history' not in st.session_state:
            st.session_state.comment_history = []

        if st.session_state.comment_history:
            for i, item in enumerate(st.session_state.comment_history[::-1]):
                if st.button(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ #{len(st.session_state.comment_history)-i}", key=f"view_{i}"):
                    st.session_state.current_page = "results"
                    st.session_state.user_comment = item['comment']
                    st.session_state.comment_analysis = {
                        "main_class": item['main_class'],
                        "subclass": item['subclass']
                    }
                    st.rerun()
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç–∞")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞


def results_page():
    st.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    if 'comment_analysis' not in st.session_state:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.session_state.current_page = "main"
            st.rerun()
        return

    # analysis = st.session_state.comment_analysis
    comment = st.session_state.user_comment
    top_indices, top_probs = predict_class_and_sub_class(comment)
    comment_class = str(top_indices[0])
    comment_subclass = str(top_indices[1])
    st.session_state.user_comment_class = comment_class
    st.session_state.user_comment_subclass = comment_subclass
    print(comment_class)
    print(comment_subclass)
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    st.subheader("–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    st.info(f'"{comment}"')

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    col1 = st.columns(1)

    with col1[0]:
        st.subheader("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        st.metric("–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å", comment_class + " " +
                  CLASS_TYPE_INFO[comment_class][0])

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞
        st.metric("–ü–æ–¥–∫–ª–∞—Å—Å", comment_subclass + " " +
                  CLASS_TYPE_INFO[comment_class][1][comment_subclass])

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –∫–ª–∞—Å—Å–µ", f"{top_probs[0] * 100}%")

        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ", f"{top_probs[1] * 100}%")

        # –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
        # st.write(f"**–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime(" % Y-%m-%d % H: % M: % S")}")

    # with col2:
        # st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:")

        # # –ü—Ä–æ—Å—Ç–∞—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        # fig, ax = plt.subplots(figsize=(6, 6))
        # sizes = [top_probs[0], 1 - top_probs[0]]
        # labels = ['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']
        # colors = ['#4CAF50', '#F44336']

        # ax.pie(sizes, labels=labels, colors=colors,
        #        autopct='%1.1f%%', startangle=90)
        # ax.axis('equal')
        # ax.set_title('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')

        # st.pyplot(fig)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    # st.divider()
    # st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

    # # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
    # if analysis['main_class'] == "–ü—Ä–æ–±–ª–µ–º–∞":
    #     st.warning("""
    #     **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
    #     - –°–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    #     - –£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    #     - –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
    #     """)
    # elif analysis['main_class'] == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
    #     st.success("""
    #     **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
    #     - –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    #     - –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    #     - –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞!
    #     """)
    # elif analysis['main_class'] == "–í–æ–ø—Ä–æ—Å":
    #     st.info("""
    #     **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
    #     - –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
    #     - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    #     - –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    #     """)
    # else:
    #     st.success("""
    #     **–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ç–∑—ã–≤!**
    #     - –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å
    #     - –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞
    #     """)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col_btn1, col_btn2 = st.columns(2)

    with col_btn1:
        if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", type="primary"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if 'comment_history' not in st.session_state:
                st.session_state.comment_history = []

            st.session_state.comment_history.append({
                "comment": comment,
                "main_class": comment_class,
                "subclass": comment_subclass,
                # "confidence": analysis['confidence'],
                # "timestamp": analysis['timestamp']
            })

            st.session_state.current_page = "main"
            st.rerun()

    with col_btn2:
        if st.button("–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"):
            st.session_state.current_page = "generate new model"
            st.rerun()


def generate_model_page():
    PROMPT_FILE_PATH = 'promts_templates/get_loss_based_on_recommendation_prompt.json'
    ANSWER_FILE_PATH = 'promts_templates/get_loss_based_on_recommendation_prompt_answer.json'
    LOSS_FILE_PATH = 'loss_dinn_LLM.py'
    LOSS_PRIMARY_FILE_PATH = 'loss_dinn_primary.py'
    LLM_URL = 'http://localhost:1234/v1/chat/completions'
    RUN_PINN_COMMAND = ['python', 'PINN.py']
    RUN_TESTER_COMMAND = ['python', 'loss_dinn_check.py ', '']
    PROMPT_FIX_ERROR_FILE_PATH = "prompt_fix_error.json"
    ANSWER_FIX_ERROR_FILE_PATH = 'answer_fix_error_from_LLM_2.json'

    EXPERT_COMMENT = st.session_state.user_comment
    comment_class = st.session_state.user_comment_class
    comment_subclass = st.session_state.user_comment_subclass

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    st.header("üöÄ –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    progress_bar = st.progress(0)
    status_text = st.empty()
    details_container = st.empty()
    error_container = st.empty()

    # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    status_text.text("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM...")
    details_container.text(
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    code = get_loss_func_as_str(LOSS_PRIMARY_FILE_PATH)
    create_get_loss_based_on_recommendation_prompt(
        PROMPT_FILE_PATH, comment_class, comment_subclass, EXPERT_COMMENT, code)
    progress_bar.progress(10)
    time.sleep(0.5)

    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
    status_text.text("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
    details_container.text("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM")
    send_prompt(PROMPT_FILE_PATH, LLM_URL,client, ANSWER_FILE_PATH)
    progress_bar.progress(30)
    time.sleep(1)

    # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    status_text.text("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM...")
    details_container.text("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞")
    json_text = load_text_to_json(ANSWER_FILE_PATH)
    code = llm_answer_to_python_code(json_text)
    # print(code)
    details_container.text(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n```python\n{code}\n```")
    progress_bar.progress(40)
    # return

    # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    status_text.text("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
    save(LOSS_FILE_PATH, code)
    progress_bar.progress(50)
    return 
    status_text.text("üß™ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
    details_container.text("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏")
    RUN_TESTER_COMMAND[2] = code
    output = subprocess.run(RUN_TESTER_COMMAND, capture_output=True, text=True)
    print(output.stdout)

    if "True" in output.stdout:
        t = (True, '')
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {t}")
    else:
        t = (False, output.stdout)
    # return
    is_correct = t[0]
    status_text.text(is_correct)
    print(is_correct)
    error = t[1]

    error_counter = 0
    max_error_iterations = 2

    # –®–∞–≥ 5: –¶–∏–∫–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    while not is_correct and error_counter < max_error_iterations:
        error_counter += 1
        status_text.text(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {error_counter})...")
        details_container.text(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error[:100]}...")
        error_container.error(f"–û—à–∏–±–∫–∞: {error}")

        progress_value = 50 + (error_counter * 10)
        progress_bar.progress(min(progress_value, 80))

        create_prompt_to_fix_error(PROMPT_FIX_ERROR_FILE_PATH, code, error)

        if error_counter % 3 == 0:
            details_container.text("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
            send_prompt(PROMPT_FILE_PATH, LLM_URL,client, ANSWER_FILE_PATH)
            json_text = load_text_to_json(ANSWER_FILE_PATH)
        else:
            details_container.text(
                "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏...")
            send_prompt(PROMPT_FIX_ERROR_FILE_PATH,
                        LLM_URL, client,ANSWER_FIX_ERROR_FILE_PATH)
            json_text = load_text_to_json(ANSWER_FIX_ERROR_FILE_PATH)

        code = llm_answer_to_python_code(json_text)
        save(LOSS_FILE_PATH, code)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        details_container.text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
        RUN_TESTER_COMMAND[2] = code
        output = subprocess.run(
            RUN_TESTER_COMMAND, capture_output=True, text=True, shell=True)
        # print(f'!!!!!!!!\n\n{output}')
        # return
        # t = eval(output.stdout)
        if "True" in output.stdout:
            t = (True, '')
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {t}")
        else:
            t = (False, output.stdout)
        is_correct = t[0]
        status_text.text(is_correct)
        error = t[1]

        if is_correct:
            error_container.empty()
            details_container.text("‚úÖ –û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            progress_bar.progress(80)

    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if not is_correct:
        status_text.text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
        error_container.error(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {error}")
        progress_bar.progress(100)
        st.error("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º—ã—Ö –æ—à–∏–±–æ–∫")
        return

    # –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è PINN
    status_text.text("üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è PINN –º–æ–¥–µ–ª–∏...")
    details_container.text(
        "–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)")
    progress_bar.progress(90)

    # –ó–∞–ø—É—Å–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    with st.spinner("–ò–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
        output = subprocess.run(
            RUN_PINN_COMMAND, capture_output=True, text=True)

    # –®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    status_text.text("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    details_container.text("–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    progress_bar.progress(100)

    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ–±—É—á–µ–Ω–∞!")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    with st.expander("–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"):
        st.text("–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        st.code(output.stdout[:1000] +
                "..." if len(output.stdout) > 1000 else output.stdout)

        if output.stderr:
            st.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏:")
            st.code(output.stderr)

    st.write("Generate complete!")
    covid_cases = pd.read_csv('data.csv')

    S = covid_cases['S']
    I = covid_cases['I']
    D = covid_cases['D']
    R = covid_cases['R']
    susceptible = []
    infected = []
    dead = []
    recovered = []
    timesteps = []

    d1 = covid_cases['S']
    d2 = covid_cases['I']
    d3 = covid_cases['D']
    d4 = covid_cases['R']
    d5 = covid_cases['t']

    for item in range(len(d5)):
        if item % 1 == 0:
            susceptible.append(d1[item])
            infected.append(d2[item])
            dead.append(d3[item])
            recovered.append(d4[item])
            timesteps.append(d5[item])
    x = 180
    loaded_dinn = load_model('./saved_models/dinn_1.pth',
                             timesteps, susceptible, infected, dead, recovered)
    loaded_dinn_new = load_model('./saved_models/NEW_MODEL_dinn_1.pth',
                             timesteps, susceptible, infected, dead, recovered)
    S_pred, I_pred, D_pred, R_pred, alpha_pred = loaded_dinn.predict()

    S_pred_new, I_pred_new, D_pred_new, R_pred_new, alpha_pred_new = loaded_dinn_new.predict()
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìà–ì—Ä–∞—Ñ–∏–∫ I")
        fig, ax = plt.subplots(figsize=(10, 6))

        ax.scatter(timesteps[:x][::10], infected[:x][::10],
                   c='blue', alpha=0.5, lw=0.5, label='Real data')

        ax.scatter(timesteps[x:][::10], infected[x:][::10],
                   c='white', edgecolors='black', alpha=0.5, lw=0.5, label='Future data')

        ax.plot(timesteps, I_pred.detach().numpy(),
                'black', alpha=0.9, lw=2, label='Model', linestyle='dashed')
        ax.plot(timesteps, I_pred_new.detach().numpy(),
                'red', alpha=0.9, lw=2, label='NEW_Model', linestyle='dashed')

        ax.set_xlabel("Time, days")
        ax.set_ylabel("Infected, persons")
        ax.legend()
        ax.grid(True, alpha=0.3)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Streamlit
        st.pyplot(fig)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'current_page' not in st.session_state:
    st.session_state.current_page = "main"

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if st.session_state.current_page == "main":
    main_page()
elif st.session_state.current_page == "results":
    results_page()
elif st.session_state.current_page == "generate new model":
    generate_model_page()

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
<style>
    .stMetric {
        background-color: #f0f2f6;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
        border-left: 4px solid #4CAF50;
    }
    .stButton button {
        width: 100%;
        margin: 5px 0;
    }
    .stInfo {
        background-color: #e6f7ff;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #1890ff;
    }
</style>
""", unsafe_allow_html=True)
